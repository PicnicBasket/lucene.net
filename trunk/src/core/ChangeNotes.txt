##############################################################
This branch does not build, and likely won't for a while. The
tests don't pass, and there is no guarantee that everything
would work properly even if it did.  There is a bit of work
being done to try and emulate java's classes as much as possible
and because of that, there may be unexpected behavior until
tests have been written and prove that they work as intended.

There are some design choices in attempts to emulate java
librarys that may change.
##############################################################

Many of the changes made to collections may be unnecessary.  HashMap might
be unnecessary, if Lucene doesn't use null keys at any point in program execution
so that a normal Dictionary may be used.  Other unnecessary additions might
be LinkedList over List in some cases, but these have to be checked on a per
case basis for behavior and performance...

TODO: AttributeSource Attribute Factory uses generic types differently than java, needs to be documented properly

Use of ISet<T> instead of HashSet<T> also may be unnecessary, when comparing the number of Sets java has vs .net

TODO: Tests need to be written for HashMap -> verify behavior
TODO: Tests need to be written for WeakDictionary
TODO: Comments need to be written for WeakDictionary
TODO: Tests need to be written for IdentityDictionary -> Verify behavior

Util.Version changed to Enum with extension methods
ThreadInterruptedException.java was not ported, because it only exists in the java because the build-in is a checked exception

TODO: ParallelMultiSearcher - cannot be ported identically to java.  Check differences.  A main one is that there are not named threads.

PriorityQueue in InsertWithOverflow, java returns null, I set it to return default(T).  I don't think it's an issue, it looks like java is doing unchecked generics.  We should look back and determine if we should contrain the generic to class
Parameter.cs - Commented code in Lucene.Net is uncommented in java
TODO: Finish HashMap<K,V> and confirm it properly emulates java's behavior
TODO: NamedThreadFactory.java
TODO: DummyConcurrentLock.java
TODO: Constants.java - LUCENE_MAIN_VERSION, and static constructor
TODO: Implement Cache.cs' IDisposable properly
TODO: Check on FSDirectory(System.IO.DirectoryInfo path, LockFactory lockFactory)
TODO: LockStressTest.java
TODO: MMapDirectory.java -> ThreadInterruptedException
TODO: NIOFSDirectory.java
TODO: RAMDirectory.java

TODO: BooleanClause.java - Can't override ToString on Enum or replace with Extension Method.  Leave type-safe, override with extension method, or create static class?
TODO: FieldValueHitQueue.Entry had to be made public for accessibility.  Look further into that.
TODO: FuzzyQuery - uses java.util.PriorityQueue<T>, which .net does not have.  Revisit later.
TODO: ParallelReader - extra data types, using SortedDictionary in place of TreeMap.  Confirm compatibility.

TODO: SegmentInfos inherites from java.util.Vector<E>, which is threadsafe.  Closest equivelant is SynchronizedCollection<T> in .NET, but it's in a System.ServiceModel, and I can't be sure it's worth a dependency on that entire assembly for the one class.  Thread safety can probably be achieved in a different way.

TODO: ThreadInterruptedException.java - This shouldn't be necessary.  Lucene is using it because it is unchecked.  C# has no checked expcetions
TODO: FSDirectory.java - ThreadInterruptedException
TODO: ConcurrentMergeScheduler - ThreadInterruptedException

CHANGED: FieldCacheRangeFilter - Expects nullable primitives for the anonymous range filters<T> -> replaced with Nulable<T>
CONFIRM: IndexWriter.java - ReaderPool.Close/Commit/Get lock/sync changes - may be wrong, probably are ok - ThreadInterruptedException(ie)
CONFIRM: Java LinkedList behavior compared to C#.  Used extensively in Attributes, filters and the like